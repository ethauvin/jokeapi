<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>LongParameterList:JokeApi.kt$( amount: Int, categories: Set&lt;Category&gt; = setOf(Category.ANY), lang: Language = Language.EN, blacklistFlags: Set&lt;Flag&gt; = emptySet(), type: Type = Type.ALL, contains: String = "", idRange: IdRange = IdRange(), safe: Boolean = false, auth: String = "", splitNewLine: Boolean = false )</ID>
    <ID>LongParameterList:JokeApi.kt$( categories: Set&lt;Category&gt; = setOf(Category.ANY), lang: Language = Language.EN, blacklistFlags: Set&lt;Flag&gt; = emptySet(), type: Type = Type.ALL, contains: String = "", idRange: IdRange = IdRange(), safe: Boolean = false, auth: String = "", splitNewLine: Boolean = false )</ID>
    <ID>LongParameterList:JokeApi.kt$( categories: Set&lt;Category&gt; = setOf(Category.ANY), lang: Language = Language.EN, blacklistFlags: Set&lt;Flag&gt; = emptySet(), type: Type = Type.ALL, format: Format = Format.JSON, contains: String = "", idRange: IdRange = IdRange(), amount: Int = 1, safe: Boolean = false, auth: String = "" )</ID>
    <ID>LongParameterList:JokeConfig.kt$JokeConfig$( val categories: Set&lt;Category&gt;, val language: Language, val flags: Set&lt;Flag&gt;, val type: Type, val format: Format, val contains: String, val idRange: IdRange, val amount: Int, val safe: Boolean, val splitNewLine: Boolean, val auth: String )</ID>
    <ID>LongParameterList:JokeException.kt$JokeException$( val internalError: Boolean, val code: Int, message: String, val causedBy: List&lt;String&gt;, val additionalInfo: String, val timestamp: Long, cause: Throwable? = null )</ID>
    <ID>MagicNumber:JokeUtil.kt$200</ID>
    <ID>MagicNumber:JokeUtil.kt$399</ID>
    <ID>MagicNumber:JokeUtil.kt$400</ID>
    <ID>MagicNumber:JokeUtil.kt$403</ID>
    <ID>MagicNumber:JokeUtil.kt$404</ID>
    <ID>MagicNumber:JokeUtil.kt$413</ID>
    <ID>MagicNumber:JokeUtil.kt$414</ID>
    <ID>MagicNumber:JokeUtil.kt$429</ID>
    <ID>MagicNumber:JokeUtil.kt$500</ID>
    <ID>MagicNumber:JokeUtil.kt$523</ID>
    <ID>TooManyFunctions:JokeConfig.kt$JokeConfig$Builder</ID>
    <ID>WildcardImport:ExceptionsTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:GetJokeTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:GetJokeTests.kt$import net.thauvin.erik.jokeapi.models.*</ID>
    <ID>WildcardImport:GetJokesTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:GetRawJokesTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:JokeApi.kt$import net.thauvin.erik.jokeapi.models.*</ID>
    <ID>WildcardImport:JokeConfig.kt$import net.thauvin.erik.jokeapi.models.*</ID>
    <ID>WildcardImport:JokeConfigTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:JokeConfigTests.kt$import net.thauvin.erik.jokeapi.models.*</ID>
    <ID>WildcardImport:JokeUtil.kt$import net.thauvin.erik.jokeapi.models.*</ID>
    <ID>WildcardImport:JokeUtilTests.kt$import assertk.assertions.*</ID>
    <ID>WildcardImport:JokeUtilTests.kt$import net.thauvin.erik.jokeapi.models.*</ID>
  </CurrentIssues>
</SmellBaseline>
